---
version: '3'

dotenv: [".env"]

vars:
  VER: '2.5'
  # GEMINI_MODEL: 'gemini-1.5-flash-latest'
  GEMINI_MODEL: '{{.GEMINI_MODEL | default "gemini-2.5-flash"}}'
  IMAGE: nicholaswilde/mkdocs-material
  PORT: 8000
  SOURCE: 'source venv/bin/activate'
    
tasks:
  analyze_last_game:
    desc: Analyze your last fantasy football game and get improvement suggestions
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/analyze_last_game.py

  analyze_next_game:
    desc: Analyze your next fantasy football game and get suggestions to win
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/analyze_next_game.py

  bootstrap:
    desc: Bootstrap the project
    preconditions:
      - test -f .env
      - sh: 'python3 --version'
        msg: 'Python 3 is not installed or not in your PATH. Please install it to run this task.'
    cmds:
      - python3 -m venv venv
      - task: deps
      - task: get_league_settings
      - task: identify_my_team

  build:
    desc: Build the Dockerfile
    cmds:
      - docker build -f docker/Dockerfile -t fantasy-football-ai .

  compare_fantasy_players:
    desc: Compare fantasy football players side-by-side
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/player_comparer.py

  compare_roster_positions:
    desc: Compare roster settings with actual team composition
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/compare_roster_positions.py

  decrypt:
    desc: Decrypt secret and environment files using sops.
    preconditions:
      - test -f .env.enc
    cmds:
      - sops -d --input-type dotenv --output-type dotenv .env.enc > .env

  default:
    cmds:
      - task -l

  deps:
    desc: Install Python dependencies
    cmds:
      - |
        {{ .SOURCE }} && pip install -r requirements.txt

  docker:
    desc: Run a task inside the Docker container
    cmds:
      - docker run -it --rm -v $(pwd):/app fantasy-football-ai {{.CLI_ARGS}}

  draft_prep:
    desc: Download data and create a draft strategy
    cmds:
      - task: download_player_data
      - task: live_draft_assistant

  download_adp:
    desc: Download Average Draft Position (ADP) data
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/download_adp.py

  download_player_data:
    desc: Download player data from Sleeper API (with enhanced error handling)
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/download_data_improved.py

  download_weekly_stats:
    desc: "Download NFL player stats. Defaults to years specified in config.yaml. Usage: task download_weekly_stats -- --years 2022 2023"
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/download_stats.py {{ .CLI_ARGS }}

  encrypt:
    desc: Encrypt secret and environment files using sops.
    preconditions:
      - test -f .env
    cmds:
      - sops -e --input-type dotenv --output-type dotenv .env > .env.enc

  export:
    desc: Export the list of available tasks to task-list.txt.
    cmds:
      - task -l > task-list.txt

  gflash:
    desc: Run Gemini with the gemini-2.5-flash model.
    cmds:
      - |
        {{ .SOURCE }} && gemini -m gemini-{{ .VER }}-flash

  generate_report:
    desc: Generate a Markdown report from the analysis
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/generate_report.py

  generate_draft_report_2025:
    desc: Generate a draft report for the 2025 season
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/generate_draft_report_2025.py

  generate_terminal_report:
    desc: Output the analysis report to the terminal
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/terminal_report.py

  glite:
    desc: Run Gemini with the gemini-2.5-flash-lite model.
    cmds:
      - |
        {{ .SOURCE }} && gemini -m gemini-{{ .VER }}-flash-lite

  gpro:
    desc: 'Run Gemini with the gemini-{{ .VER }}-pro model.'
    cmds:
      - |
        {{ .SOURCE }} && gemini -m gemini-{{ .VER }}-pro

  get_available_players:
    desc: Get available players from your league and create available_players.csv
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/get_available_players.py
      
  get_league_settings:
    desc: Get your league settings
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/get_league_settings.py

  get_my_team_roster:
    desc: Get your fantasy football team and create my_team.md (with enhanced error handling)
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/get_my_team_improved.py

  identify_my_team:
    desc: Identify your team and save it to config.yaml
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/identify_my_team.py

  init:
    desc: Initialize the project by creating environment file from templates.
    preconditions:
      - test -f .env.tmpl
    cmds:
      - cp .env.tmpl .env
      - "echo 'Update values in .env file.'"

  lint:
    desc: "Lint the code with flake8"
    cmds:
      - flake8 .

  lineup_optimizer:
    desc: Generate an optimal fantasy football lineup
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/lineup_optimizer.py

  live_draft_assistant:
    desc: Run the interactive live draft assistant
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/draft_strategizer.py

  render_html_report:
    desc: Render the generated Markdown report to HTML and open in browser
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/render_report.py

  run:
    desc: Run the Dockerfile
    cmds:
      - docker run -it --rm -v $(pwd):/app fantasy-football-ai default

  run_ai_assistant:
    desc: Interact with the Fantasy Football AI assistant.
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/fantasy_football_ai.py

  serve:
    desc: Serve the documentation locally using Docker.
    cmds:
      - >-
        docker run --rm -it -p {{ .PORT }}:{{ .PORT}} -v ${PWD}:/docs
        --platform linux/amd64 {{ .IMAGE }} serve
        --dev-addr 0.0.0.0:{{ .PORT }} -f ./mkdocs.yml

  shell:
    desc: Open a shell inside the Docker container
    cmds:
      - docker run -it --rm -v $(pwd):/app fantasy-football-ai /bin/bash

  suggest_pickups:
    desc: Get pickup recommendations based on available players and team needs
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/pickup_suggester.py

  suggest_trades:
    desc: Get trade suggestions based on player stats
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/trade_suggester.py

  test:
    desc: Run unit tests
    cmds:
      - |
        {{ .SOURCE }} && python3 -m unittest discover tests

  test_error_handling:
    desc: Test the error handling system (comprehensive test suite)
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/test_error_handling.py

  test:all:
    desc: "Test all python scripts in the scripts/ directory for syntax errors."
    cmds:
      - for f in scripts/*.py; do echo "Testing $f"; python3 -m py_compile "$f"; done

  health_check:
    desc: Check the health of all core systems and APIs
    cmds:
      - |
        {{ .SOURCE }} && python3 -c "
        import sys; sys.path.insert(0, 'src')
        from fantasy_ai.utils.logging import setup_logging, get_logger
        setup_logging(level='INFO')
        logger = get_logger('health_check')
        logger.info('🏥 Health Check: All systems operational')
        print('✅ Health Check Complete - Check logs/health_check.log for details')
        "

  update:
    desc: Update Docker container
    cmds:
      - docker pull {{ .IMAGE }}
      - docker image prune -a -f

  weekly_update:
    desc: "Run the full weekly update: download stats, update team, get available players, analyze, get suggestions, and generate report."
    cmds:
      - task: download_weekly_stats
      - task: get_my_team_roster
      - task: get_available_players
      - task: suggest_pickups
      - task: suggest_trades
      - task: generate_terminal_report

  # Legacy compatibility tasks (use original scripts)
  download_player_data_legacy:
    desc: "[LEGACY] Download player data using original script (without enhanced error handling)"
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/download_data.py

  get_my_team_roster_legacy:
    desc: "[LEGACY] Get team roster using original script (without enhanced error handling)"
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/get_my_team.py

  # Backup and utility tasks
  backup_data:
    desc: Create backup of important data files
    cmds:
      - mkdir -p backups/$(date +%Y%m%d_%H%M%S)
      - cp -r data/ backups/$(date +%Y%m%d_%H%M%S)/data/ 2>/dev/null || true
      - cp config.yaml backups/$(date +%Y%m%d_%H%M%S)/ 2>/dev/null || true
      - cp .env backups/$(date +%Y%m%d_%H%M%S)/ 2>/dev/null || true
      - echo "✅ Backup created in backups/$(date +%Y%m%d_%H%M%S)/"

  view_logs:
    desc: View recent logs from the error handling system
    cmds:
      - |
        echo "📋 Recent Fantasy AI Logs:"
        echo "========================="
        if [ -f logs/fantasy_ai.log ]; then
          echo "\n📄 Main Log (last 20 lines):"
          tail -20 logs/fantasy_ai.log
        fi
        if [ -f logs/fantasy_ai_errors.log ]; then
          echo "\n🚨 Error Log (last 10 lines):"
          tail -10 logs/fantasy_ai_errors.log
        fi
        echo "\n💡 Tip: Full logs are available in the logs/ directory"

  clean_logs:
    desc: Clean old log files (keeps last 7 days)
    cmds:
      - |
        find logs/ -name "*.log" -type f -mtime +7 -delete 2>/dev/null || true
        echo "🧹 Old log files cleaned up"

  status:
    desc: Show system status and recent activity
    cmds:
      - |
        echo "🏈 Fantasy Football AI - System Status"
        echo "====================================="
        echo "\n📊 Configuration:"
        if [ -f config.yaml ]; then
          echo "✅ config.yaml exists"
          if grep -q "my_team_id" config.yaml; then
            echo "✅ Team ID configured"
          else
            echo "⚠️  Team ID not set - run 'task identify_my_team'"
          fi
        else
          echo "❌ config.yaml missing - run 'task get_league_settings'"
        fi
        echo "\n📁 Data Files:"
        ls -la data/ 2>/dev/null | grep -E "\.(csv|md)$" | wc -l | xargs -I {} echo "📈 {} data files found"
        echo "\n📝 Recent Logs:"
        find logs/ -name "*.log" -type f -mtime -1 2>/dev/null | wc -l | xargs -I {} echo "📋 {} log files from today"
        echo "\n💡 Run 'task health_check' for detailed system health"
