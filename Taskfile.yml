---
version: '3'

dotenv: [".env"]

vars:
  VER: '2.5'
  # GEMINI_MODEL: 'gemini-1.5-flash-latest'
  GEMINI_MODEL: '{{.GEMINI_MODEL | default "gemini-2.5-flash"}}'
  IMAGE: nicholaswilde/mkdocs-material
  PORT: 8000
  SOURCE: 'source venv/bin/activate'
    
tasks:
  # Use this to run any task inside the Docker container.
  docker:
    desc: Run a task inside the Docker container
    cmds:
      - docker run -it --rm -v $(pwd):/app fantasy-football-ai {{.CLI_ARGS}}

  shell:
    desc: Open a shell inside the Docker container
    cmds:
      - docker run -it --rm -v $(pwd):/app fantasy-football-ai /bin/bash

  build:
    desc: Build the Dockerfile
    cmds:
      - docker build -t fantasy-football-ai ./docker/
  run:
    desc: Run the Dockerfile
    cmds:
      - docker run -it --rm -v $(pwd):/app fantasy-football-ai default

  report:
    desc: Generate a Markdown report from the analysis
    cmds:
      - |
        {{ .SOURCE }} && ./scripts/generate_report.py

  report_terminal:
    desc: Output the analysis report to the terminal
    cmds:
      - |
        {{ .SOURCE }} && ./scripts/terminal_report.py

  render_report:
    desc: Render the generated Markdown report to HTML and open in browser
    cmds:
      - |
        {{ .SOURCE }} && ./scripts/render_report.py

  update:
    desc: Update Docker container
    cmds:
      - docker pull {{ .IMAGE }}
      - docker image prune -a -f

  init:
    desc: Initialize the project by creating environment file from templates.
    preconditions:
      - test -f .env.tmpl
    cmds:
      - cp .env.tmpl .env
      - "echo 'Update values in .env file.'"

  serve:
    desc: Serve the documentation locally using Docker.
    cmds:
      - >-
        docker run --rm -it -p {{ .PORT }}:{{ .PORT}} -v ${PWD}:/docs
        --platform linux/amd64 {{ .IMAGE }} serve
        --dev-addr 0.0.0.0:{{ .PORT }} -f ./mkdocs.yml

  export:
    desc: Export the list of available tasks to task-list.txt.
    cmds:
      - task -l > task-list.txt

  encrypt:
    desc: Encrypt secret and environment files using sops.
    preconditions:
      - test -f .env
    cmds:
      - sops -e --input-type dotenv --output-type dotenv .env > .env.enc

  decrypt:
    desc: Decrypt secret and environment files using sops.
    preconditions:
      - test -f .env.enc
    cmds:
      - sops -d --input-type dotenv --output-type dotenv .env.enc > .env

  gpro:
    desc: 'Run Gemini with the gemini-{{ .VER }}-pro model.'
    cmds:
      - |
        {{ .SOURCE }} && gemini -m gemini-{{ .VER }}-pro

  gflash:
    desc: Run Gemini with the gemini-2.5-flash model.
    cmds:
      - |
        {{ .SOURCE }} && gemini -m gemini-{{ .VER }}-flash

  glite:
    desc: Run Gemini with the gemini-2.5-flash-lite model.
    cmds:
      - |
        {{ .SOURCE }} && gemini -m gemini-{{ .VER }}-flash-lite

  bootstrap:
    desc: Bootstrap the project
    preconditions:
      - test -f .env
      - sh: 'python3 --version'
        msg: 'Python 3 is not installed or not in your PATH. Please install it to run this task.'
    cmds:
      - python3 -m venv venv
      - task: deps
      - task: settings

  lint:
    desc: "Lint the code with flake8"
    cmds:
      - flake8 .
  # A task to install all the necessary Python dependencies from requirements.txt.
  deps:
    desc: Install Python dependencies
    cmds:
      - |
        {{ .SOURCE }} && pip install -r requirements.txt

  # A task to download the latest player stats.
  download:
    desc: "Download NFL player stats. Usage: task download -- --years 2022 2023"
    cmds:
      - |
        {{ .SOURCE }} && ./scripts/download_stats.py {{ .CLI_ARGS }}

  # A task to get pickup recommendations.
  pickup:
    desc: Get pickup recommendations based on available players and team needs
    cmds:
      - |
        {{ .SOURCE }} && ./scripts/pickup_suggester.py

  # A task to get trade suggestions.
  trade:
    desc: Get trade suggestions based on player stats
    cmds:
      - |
        {{ .SOURCE }} && ./scripts/trade_suggester.py

  # A task to run the draft strategizer.
  draft_strategy:
    desc: Run the draft strategizer to get draft recommendations
    cmds:
      - | 
        {{ .SOURCE }} && python3 scripts/draft_strategizer.py

  weekly_update:
    desc: "Run the full weekly update: download stats, update team, get available players, analyze, get suggestions, and generate report."
    cmds:
      - task: download
      - task: my_team
      - task: available_players
      - task: pickup
      - task: trade
      - task: report_terminal

  my_team:
    desc: Get your fantasy football team and create my_team.md
    cmds:
      - |
        {{ .SOURCE }} && ./scripts/get_my_team.py

  available_players:
    desc: Get available players from your league and create available_players.csv
    cmds:
      - |
        source venv/bin/activate && ./scripts/get_available_players.py
      
  settings:
    desc: Get your league settings
    cmds:
      - |
        {{ .SOURCE }} && scripts/get_league_settings.py

  compare_roster:
    desc: Compare roster settings with actual team composition
    cmds:
      - |
        {{ .SOURCE }} && ./scripts/compare_roster_positions.py

  download_data:
    desc: Download player data from Sleeper API
    cmds:
      - |
        {{ .SOURCE }} && python3 scripts/download_data.py

  draft_prep:
    desc: Download data and create a draft strategy
    cmds:
      - task: download_data
      - task: draft_strategy

  default:
    cmds:
      - task -l
